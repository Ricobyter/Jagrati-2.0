//* They(Controllers) process requests coming from routers
const User = require("../model/UserModel")
// const bcrypt = require("bcryptjs")
const bcrypt = require("bcryptjs")
const jwt = require("jsonwebtoken")

//? Home Page logic

const home = async (req,res) => {
    try
    {
        res
        .status(200)
        .send(
            "Welcome to homepage"
        )
    }
    catch(err)
    {
        console.log(err)    
    }

}

//* User regisration logic


const register = async (req, res) => {
    try {


        let userexist = await User.findOne({ email: req.body.email });
        if(userexist){
            return res.status(400).json({
                message: "User already exists"
            })
        } 
        else{
            // Hash the password using Bcrypt
        // const saltRound = 10;
        // const hashPassword = await bcrypt.hash(req.body.password, 10);
        // OR
        // bcrypt.genSalt(10, (err, salt) => {
        //     bcrypt.hash(user.password, salt, (err, hash) => {
        //         if (err) throw err;
        //         user.password = hash;
        //     });
        // }
        let user = new User({
            name: req.body.name,
            email: req.body.email,
            rollno : req.body.rollno,
            // gender: req.body.phone,
            designation: req.body.designation,
            year: req.body.year,
            // password: hashPassword,
            password: req.body.password,
        });

        user.save()
        .then(user => {
            let token = jwt.sign({name: user.name}, 'SecretValue', {expiresIn: '1h'})
            res.json({
                message: 'User added successfully',
                token
                // token : await user.generateToken(),


            })
        })
        .catch(err => {
            res.json({
                message: "An error occured"
            })
        })
    }
    } catch (err) {
        console.error("Error registering user:", err);
        res.status(500).json({ message: "An error occurred while registering user", error: err.message });
    }
};


// //* Refresh Token for User Login
// const refreshToken = (req,res,next) => {``
//     const refreshToken = req.body.refreshToken
//     jwt.verify(refreshToken, 'RefreshToken', function(err, user){
//         if(err){
//             res.json({
//                 err
//             }) 
//         }else{
//             let token = jwt.sign({name: user.name}, 'SecretValue', {expiresIn: '10s'})
//             let refreshToken = req.body.refreshToken
//             res.status(200).json({
//                 message: "Token refreshed successfully",
//                 token,
//                 refreshToken
//             })
//         }
//     })

// }


// //* User Login Logic


const login = async (req, res) => {
    try {
        const {email,password} = req.body

        const userExist = await User.findOne({email})

        if(!userExist)
        {
            return res.status(400).json({
                message: "Invalid Credentials"
            })
        } 
        else
        {
            // const isValidPassword = await  bcrypt.compare(password, userExist.password)

            const isValidPassword = await userExist.comparePassword(password)

            if(isValidPassword){
                let token = jwt.sign({name: userExist.name}, 'SecretValue', {expiresIn: '1h'})
                res.json({
                    message: 'Login Successful',
                    token
                })
            }else{
                res.status(400).json({
                    message: "Password don't match"
                })
            }

        }
    }catch(err){
        console.log(err)
    }
}

module.exports = {home, register, login}